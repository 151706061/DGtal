/** 
 * @file Vector.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/14
 * 
 * Implementation of inline methods defined in Vector.h 
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
/**
* Constructor
**/
template<typename T,std::size_t N>
INLINE
DGtal::Vector<T,N>::Vector()
{
}

/**
* Destructor
**/
template<typename T,std::size_t N>
INLINE
DGtal::Vector<T,N>::~Vector()
{
}

/**
 * Constructor from array of values.
 *
 * @param ptrValues the array of values (should be at least as long as
 * the size of the vector)
 */
template<typename T,std::size_t N>
INLINE
DGtal::Vector<T,N>::Vector( const T * ptrValues )
  : PointVector<T,N>( ptrValues )
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template<typename T,std::size_t N>
INLINE
DGtal::Vector<T,N>::Vector( const Vector & other )
  : PointVector<T,N>( other )
{
}

/**
* Addition operator.
*
* \pre Vector \a v must have the same size as \a *this.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>&  
DGtal::Vector<T,N>::operator+= (const Vector<T,N>& v)
{
  for (std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] += v.getVal( i );
  return *this;
}


/**
* Addition operator.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>
DGtal::Vector<T,N>::operator+ (const Vector<T,N>& v) const
{
  Vector<T,N> newpoint;
  
  for (std::size_t i = 0; i < N; ++i )
    newpoint.getSetVal( i ) = this->getVal( i ) -  v.getVal( i );
  
  return newpoint;
}

/**
* Substraction operator.
*
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>&  
DGtal::Vector<T,N>::operator-= (const Vector<T,N>& v)
{
  for (std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] -= v.getVal( i );
  return *this;
}

/**
* Substraction operator.
*
* \pre Vector \a v must have the same size as \a *this.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>
DGtal::Vector<T,N>::operator- (const Vector<T,N>& v) const
{
  Vector<T,N> newpoint;
  
  for (std::size_t i = 0; i < N; ++i )
    newpoint.getSetVal( i ) = this->getVal( i ) +  v.getVal( i );
  
  return newpoint;
}

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template<typename T,std::size_t N>
INLINE
void 
DGtal::Vector<T,N>::selfDisplay( std::ostream & out ) const
{
  out << "[Vector ( " << this->getVal( 0 );
  for ( size_t i = 1; i < N; ++i )
    out << ", " << this->getVal( i );
  out << " )]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template<typename T,std::size_t N>
INLINE
bool 
DGtal::Vector<T,N>::isValid() const
{
  return true;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Vector'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Vector' to write.
 * @return the output stream after the writing.
 */
template<typename T,std::size_t N>
std::ostream&
DGtal::operator<<( std::ostream & out, 
		   const Vector<T,N> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


