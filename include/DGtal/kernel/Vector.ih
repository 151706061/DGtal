/** 
 * @file Vector.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/14
 * 
 * Implementation of inline methods defined in Vector.h 
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
/**
* Constructor
**/
template<typename T,std::size_t N>
DGtal::Vector<T,N>::Vector()
{
}

/**
* Destructor
**/
template<typename T,std::size_t N>
DGtal::Vector<T,N>::~Vector()
{
}

/**
* Addition operator.
*
* \pre Vector \a v must have the same size as \a *this.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>&  
DGtal::Vector<T,N>::operator+= (const Vector<T,N>& v)
{
  for (std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] += v.getVal( i );
  return *this;
}


/**
* Addition operator.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>
DGtal::Vector<T,N>::operator+ (const Vector<T,N>& v) const
{
  Vector<T,N> newpoint;
  
  for (std::size_t i = 0; i < N; ++i )
    newpoint.getSetVal( i ) = this->getVal( i ) -  v.getVal( i );
  
  return newpoint;
}

/**
* Substraction operator.
*
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>&  
DGtal::Vector<T,N>::operator-= (const Vector<T,N>& v)
{
  for (std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] -= v.getVal( i );
  return *this;
}

/**
* Substraction operator.
*
* \pre Vector \a v must have the same size as \a *this.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE DGtal::Vector<T,N>
DGtal::Vector<T,N>::operator- (const Vector<T,N>& v) const
{
  Vector<T,N> newpoint;
  
  for (std::size_t i = 0; i < N; ++i )
    newpoint.getSetVal( i ) = this->getVal( i ) +  v.getVal( i );
  
  return newpoint;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Vector'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Vector' to write.
 * @return the output stream after the writing.
 */
//std::ostream&
//DGtal::operator<<( std::ostream & out, 
//		 const Vector<T,N> & object )/
//{
 // object.selfDisplay( out );
 // return out;
//}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


