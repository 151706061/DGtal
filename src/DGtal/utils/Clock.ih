/** 
 * @file Clock.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 * 
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2009/12/11
 * 
 * Implementation of inline methods defined in Clock.h 
 *
 * This file is part of the DGtal library (backported from imagene).
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_Clock(x)
#define DEBUGCMD_Clock(x)
#else //defined(NO_DEBUG)
/** Assertion macro for module Clock. Depends on symbol NO_DEBUG. */
#define ASSERT_Clock(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
/** Debug macro for module Clock. Depends on symbol NO_DEBUG. */
#define DEBUGCMD_Clock(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Clock'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Clock' to write.
 * @return the output stream after the writing.
 */
INLINE
std::ostream&
DGtal::operator<<( std::ostream & out, 
		 const Clock & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


