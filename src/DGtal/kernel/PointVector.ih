/**
 * @file PointVector.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/14
 *
 * Implementation of inline methods defined in PointVector.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <cmath>
//////////////////////////////////////////////////////////////////////////////


/**
 * Constructor
 **/
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector()
{  
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = 0;
}

/**
 * Destructor
 **/
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::~PointVector()
{}

/**
 * Constructor from array of values.
 *
 * @param ptrValues the array of values (should be at least as long as
 * the size of the vector)
 */
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector( const T * ptrValues )
{
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = ptrValues[ i ];
}

template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector(std::initializer_list<T> init)
{ 
  unsigned int i=0;
  for (const T *p = init.begin (); p != init.end (); ++p, ++i)
    myArray[ i ] = *p;
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector ( const PointVector<T,N> & other )
  : myArray( other.myArray )
{}

/**
 * Returns the size of the vector (i.e. the number of its
 * coefficients).
 */
template<typename T,std::size_t N>
inline
std::size_t
DGtal::PointVector<T,N>::size()
{
  return N;
}

/**
 * Returns the size of the vector (i.e. the number of its
 * coefficients).
 */
template<typename T,std::size_t N>
inline
std::size_t
DGtal::PointVector<T,N>::dimension()
{
  return N;
}


/**
 * Returns the  \a i-th coefficient of the vector.
 *
 * \pre The \a i index must lie between \a 0 and \a size() .
 *
 * \param i is the index of the retrieved coefficient.
 */

template<typename T,std::size_t N>
inline
const T&
DGtal::PointVector<T,N>::at ( std::size_t i ) const
{

  ASSERT ( i < dimension() );

  return myArray.at( i );
}


/**
 * Returns a non-const reference to the \a i-th element of the
 * vector.
 *
 * \pre The \a i index must lie between \a 0 and \a size() .
 *
 * \param i is the index of the retrieved coefficient.
 */
template<typename T,std::size_t N>
inline T& DGtal::PointVector<T,N>::at( std::size_t i )
{
  ASSERT ( i < dimension() );

  return myArray.at( i );
}


/**
 * Multiplies \a *this by the \a coeff scalar number.
 *
 * \param coeff is the factor \a *this get multiplied by.
 */
template<typename T, std::size_t N>
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator*= ( T coeff )
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    myArray[ i ] *= coeff;
  return *this;
}



/**
 * Assignemnt operator
 *
 * \param aPointVector is the pointvector to assign to \a *this.
 */
template<typename T, std::size_t N>
inline
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator= ( const PointVector<T,N> &aPointVector )
{
  myArray = aPointVector.myArray;
  return *this;
}


/**
 * Comparison operator
 *
 * \param aPointVector is the pointvector to test its equality to \a *this.
 */
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator== ( const PointVector<T,N> &aPointVector ) const
{
  return (myArray == aPointVector.myArray);
}

/**
 * Difference operator
 *
 * \param aPointVector is the pointvector and we return \param this == \param aPointVector
 */
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator!= ( const PointVector<T,N> &aPointVector ) const
{
  return (myArray != aPointVector.myArray);
}

/**
 * Comparison operator.
 *
 * \param aPointVector is the pointvector and we return \param this < \param aPointVector
 */
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator< ( const PointVector<T,N> &aPointVector ) const
{
  return (myArray < aPointVector.myArray);
}


/**
 * Comparison operator.
 *
 * \param aPointVector is the pointvector and we return \param this <= \param aPointVector
 */
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator<= ( const PointVector<T,N> &aPointVector ) const
{
  return (myArray <= aPointVector.myArray);
}

/**
 * Comparison operator.
 *
 * \param aPointVector is the pointvector and we return \param this > \param aPointVector
 */
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator> ( const PointVector<T,N> &aPointVector ) const
{
  return (myArray > aPointVector.myArray);
}

/**
 * Comparison operator.
 *
 * \param aPointVector is the pointvector and we return \param this => \param aPointVector
 */
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator>= ( const PointVector<T,N> &aPointVector ) const
{
  return (myArray >= aPointVector.myArray);
}


/**
 * Addition operator.
 *
 * \pre PointVector \a v must have the same size as \a *this.
 *
 * \param v is the vector that gets added to \a *this.
 */
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator+= ( const PointVector<T,N>& v )
{
  for ( std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] += v.at ( i );
  return *this;
}

/**
 * Addition operator.
 *
 * \param v is the vector that gets added to \a *this.
 */
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>
DGtal::PointVector<T,N>::operator+ ( const PointVector<T,N>& v ) const
{
  PointVector<T,N> newpoint;

  for ( std::size_t i = 0; i < N; ++i )
    newpoint.at ( i ) = this->at ( i ) +  v.at ( i );

  return newpoint;
}

/**
 * Substraction operator.
 *
 *
 * \param v is the vector that gets added to \a *this.
 */
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator-= ( const PointVector<T,N>& v )
{
  for ( std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] -= v.at ( i );
  return *this;
}

/**
 * Substraction operator.
 *
 * \pre PointVector \a v must have the same size as \a *this.
 *
 * \param v is the vector that gets added to \a *this.
 */
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>
DGtal::PointVector<T,N>::operator- ( const PointVector<T,N>& v ) const
{
  PointVector<T,N> newpoint;

  for ( std::size_t i = 0; i < N; ++i )
    newpoint.at ( i ) = this->at ( i ) -  v.at ( i );

  return newpoint;
}


/**
 * Resets all the values to zero.
 */
template<typename T, std::size_t N>
inline
void
DGtal::PointVector<T,N>::reset()
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    myArray[ i ] = 0;
}


/**
 * Computes the norm of a point/vector.
 *
 * \param type specifies the type of norm to consider (see \ref NormType)
 * \return the norm of the point/vector
 */
template<typename T, std::size_t N>
inline
double
DGtal::PointVector<T,N>::norm (typename PointVector<T,N>::NormType aType )
{
  double tmp= 0.0;

  ASSERT ( dimension() > 0 );

  switch ( aType ) 
    {
    case L_2:
      for ( uint i=0; i < dimension(); i++ )
	tmp += at ( i ) *at ( i );
      tmp = ( double ) sqrt ( tmp );
      break;
    case L_1:
      for ( uint i=0; i < dimension(); i++ )
	tmp += fabs ( at( i ) );
      break;
    case L_infty:
      tmp = at( 0 );
      for ( uint i=1; i < dimension(); i++ )
	if ( tmp < fabs ( at ( i ) ) )
	  tmp = fabs ( at ( i ) );
      break;
    }
  return tmp;
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */

template<typename T,std::size_t N>
inline
void 
DGtal::PointVector<T,N>::selfDisplay( std::ostream & out ) const
{
  out << "[PointVector] {";
  for(unsigned int i=0; i < dimension() ; ++i)
    out << at( i ) <<(i==dimension()-1?"":", ");
  out << "}";  
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template<typename T,std::size_t N>
inline
bool 
DGtal::PointVector<T,N>::isValid() const
{
  return true;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //



//                                                                           //
///////////////////////////////////////////////////////////////////////////////


