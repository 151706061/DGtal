/**
 * @file Point.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/05/14
 *
 * Implementation of inline methods defined in Point.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
* Constructor
**/
template<typename T,std::size_t N>
INLINE
DGtal::Point<T,N>::Point()
{
}

/**
* Destructor
**/
template<typename T,std::size_t N>
INLINE
DGtal::Point<T,N>::~Point()
{
}

/**
* Constructor from array of values.
*
* @param ptrValues the array of values (should be at least as long as
* the size of the vector)
*/
template<typename T,std::size_t N>
INLINE
DGtal::Point<T,N>::Point( const T * ptrValues )
: PointVector<T,N>( ptrValues )
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
template<typename T,std::size_t N>
INLINE
DGtal::Point<T,N>::Point( const Point & other )
  : PointVector<T,N>( other )
{
}


/**
* Addition operator.
*
* \pre Vector \a v must have the same size as \a *this.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE 
DGtal::Point<T,N>&
DGtal::Point<T,N>::operator+= ( const Vector<T,N>& v )
{
    for ( std::size_t i = 0; i < N; ++i )
        this->myArray[ i ] += v.at ( i );
    return *this;
}

/**
* Addition operator.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE 
DGtal::Point<T,N>
DGtal::Point<T,N>::operator+ ( const Vector<T,N>& v ) const
{
    Point<T,N> newpoint;

    for ( std::size_t i = 0; i < N; ++i )
        newpoint.at ( i ) = this->at ( i ) +  v.at ( i );

    return newpoint;
}

/**
* Substraction operator.
*
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE 
DGtal::Point<T,N>&
DGtal::Point<T,N>::operator-= ( const Vector<T,N>& v )
{
    for ( std::size_t i = 0; i < N; ++i )
        this->myArray[ i ] -= v.at ( i );
    return *this;
}

/**
* Substraction operator.
*
* \pre Vector \a v must have the same size as \a *this.
*
* \param v is the vector that gets added to \a *this.
*/
template<typename T,std::size_t N>
INLINE 
DGtal::Point<T,N>
DGtal::Point<T,N>::operator- ( const Vector<T,N>& v ) const
{
    Point<T,N> newpoint;

    for ( std::size_t i = 0; i < N; ++i )
        newpoint.at ( i ) = this->at ( i ) -  v.at ( i );

    return newpoint;
}

/**
 * Substraction operator.
 * Point - Point => Vector
 *
 * \param p is the Point that gets substracted to \a *this.
 */
template<typename T,std::size_t N>
INLINE 
DGtal::Vector<T,N>
DGtal::Point<T,N>::operator- ( const Point<T,N>& p ) const
{
  Vector<T,N> newVector;
  for ( std::size_t i = 0; i < N; ++i )
    newVector.at ( i ) = this->at ( i ) -  p.at ( i );
  return newVector;
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template<typename T, std::size_t N>
INLINE
void 
DGtal::Point<T,N>::selfDisplay( std::ostream & out ) const
{
  out << "[Point ( " << this->at( 0 );
  for ( size_t i = 1; i < N; ++i )
    out << ", " << this->at( i );
  out << " )]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template<typename T, std::size_t N>
INLINE
bool 
DGtal::Point<T,N>::isValid() const
{
  return true;
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Point'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Point' to write.
 * @return the output stream after the writing.
 */
template<typename T,std::size_t N>
INLINE
std::ostream&
DGtal::operator<<( std::ostream & out,
		   const Point<T,N> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


