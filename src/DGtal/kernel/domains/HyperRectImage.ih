/**
 * @file HyperRectImage.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/25
 *
 * Implementation of inline methods defined in HyperRectImage.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

/**
* Destructor.
*/
template <class THyperRectDomain, typename T>
inline
DGtal::HyperRectImage<THyperRectDomain,T>::HyperRectImage(const typename THyperRectDomain::TPoint &aPointA,
        const  typename THyperRectDomain::TPoint &aPointB ) : myDomain(aPointA,aPointB)
{
    myImageMap.reserve(myDomain.extent());
}


/**
 * Destructor.
 */
template <class THyperRectDomain, typename T>
inline
DGtal::HyperRectImage<THyperRectDomain,T>::~HyperRectImage()
{
}



///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <class THyperRectDomain, typename T>
inline
void
DGtal::HyperRectImage<THyperRectDomain,T>::selfDisplay ( std::ostream & out ) const
{
    out << "[HyperRectImage]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <class THyperRectDomain, typename T>
inline
bool
DGtal::HyperRectImage<THyperRectDomain,T>::isValid() const
{
    return true;
}


template <class THyperRectDomain, typename T>
inline
T
DGtal::HyperRectImage<THyperRectDomain,T>::operator()(DGtal::HyperRectImage<THyperRectDomain,T>::TPoint &aPoint)
{
    return myImageMap.at( linearized( aPoint ) );
}



/**
* Overloads 'operator<<' for displaying objects of class 'HyperRectImage'.
* @param out the output stream where the object is written.
* @param object the object of class 'HyperRectImage' to write.
* @return the output stream after the writing.
*/
template<class THyperRectDomain, typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const HyperRectImage<THyperRectDomain,T> & object )
{
    object.selfDisplay ( out );
    return out;
}


///////////////////////////////////////////////////////////////////////////////
// Internals - private :
template<class THyperRectDomain, typename T>
inline
DGtal::HyperRectImage<THyperRectDomain,T>::TSizeType
linearized( DGtal::HyperRectImage<THyperRectDomain,T>::TPoint &aPoint)
{
    DGtal::HyperRectImage<THyperRectDomain,T>::TSizeType pos = aPoint.at( 0 );
    DGtal::HyperRectImage<THyperRectDomain,T>::TSizeType multiplier = 1;

    for (unsigned int k = 1 ; k < THyperRectDomain::TSpace::Dimension ; k++)
    {
        multiplier *= (myUpperBound.at( k-1 ) - myLowerBound.at ( k-1 ));
        pos += multiplier * aPoint.at( k );
    }

    return pos;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
