/**
 * @file HyperRectDomain.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/25
 *
 * Implementation of inline methods defined in HyperRectDomain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
 * Constructor.
 *
 * (Lowest = Highest = {0}^n)
 */
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain() : myLowerBound(Point::zero),
						    myUpperBound(Point::zero),
						    myIteratorBegin(Point::zero,Point::zero,Point::zero),
						    myIteratorEnd(Point::zero,Point::zero,Point::zero)
{ ++myIteratorEnd; }

/**
 * Constructor from  two points (the Space diagonal)
 *
 *
 */
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain ( const Point &aPointA,
						  const Point &aPointB ) :
  myLowerBound(std::min(aPointA,aPointB)),
  myUpperBound(std::max(aPointA,aPointB)),
  myIteratorBegin(myLowerBound,myLowerBound,myUpperBound),
  myIteratorEnd(myUpperBound,myLowerBound,myUpperBound)
{
  ++myIteratorEnd;
}

/**
 * Copy Constructor.
 *
 *
 */
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain ( const typename DGtal::HyperRectDomain<TSpace> &aDomain) :
  myLowerBound(aDomain.lowerBound()),
  myUpperBound(aDomain.upperBound()),
  myIteratorBegin(aDomain.myIteratorBegin),
  myIteratorEnd(aDomain.myIteratorEnd)
{}


/**
 * Destructor.
 */
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::~HyperRectDomain()
{}

/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 * Forbidden by default.
 */
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace> &
DGtal::HyperRectDomain<TSpace>::operator= ( const typename DGtal::HyperRectDomain<TSpace> & other )
{
  myLowerBound = other.myLowerBound;
  myUpperBound = other.myUpperBound;
  myIteratorBegin = other.myIteratorBegin;
  myIteratorEnd = other.myIteratorEnd;
  return *this;
}




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //



/**
 * Returns the extent of the HyperRectDomain
 *
 **/
template<typename TSpace>
inline
std::size_t
DGtal::HyperRectDomain<TSpace>::extent() const
{
  return extent(myLowerBound,myUpperBound);
}



/**
 * Returns the lowest point of the space diagonal.
 *
 **/
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Point &
DGtal::HyperRectDomain<TSpace>::lowerBound() const
{
  return myLowerBound;
}


/**
 * Returns the highest point of the space diagonal.
 *
 **/
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Point &
DGtal::HyperRectDomain<TSpace>::upperBound() const
{
  return myUpperBound;
}


/**
 * begin() iterator.
 *
 **/
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::ConstIterator &
DGtal::HyperRectDomain<TSpace>::begin() const
{ 
  return myIteratorBegin;
}


/**
 * begin(aPoint) iterator.
 *
 **/
template<typename TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstIterator
DGtal::HyperRectDomain<TSpace>::begin ( const typename HyperRectDomain<TSpace>::Point &aPoint ) const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstIterator ( aPoint,myLowerBound,myUpperBound );
}

template<typename TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstIterator
DGtal::HyperRectDomain<TSpace>::begin(std::initializer_list<unsigned int> permutation)
{ return typename DGtal::HyperRectDomain<TSpace>::ConstIterator ( myLowerBound,myLowerBound,myUpperBound,
								  permutation);
}


/**
 * end() iterator.
 *
 **/
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::ConstIterator &
DGtal::HyperRectDomain<TSpace>::end() const
{
  return myIteratorEnd;
}

template<typename TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstIterator
DGtal::HyperRectDomain<TSpace>::end(std::initializer_list<unsigned int> permutation)
{
  ConstIterator res(myUpperBound,myLowerBound,myUpperBound,permutation);
  ++res;
  return res;
}

//------------Span Iterators
/**
 * begin(aPoint,dim) Span iterator.
 *
 **/
template<typename TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator
DGtal::HyperRectDomain<TSpace>::span_begin ( const typename HyperRectDomain<TSpace>::Point &aPoint , const std::size_t aDimension) const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator ( aPoint, aDimension );
}
/**
 * end(dim) iterator.
 *
 **/
template<typename TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator
DGtal::HyperRectDomain<TSpace>::span_end( const std::size_t aDimension ) const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator ( this->myUpperBound, aDimension );
}




//------------helpers

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[HyperRectDomain] = ["<< myLowerBound <<"]x["
      << myUpperBound <<"]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template<typename TSpace>
inline
bool
DGtal::HyperRectDomain<TSpace>::isValid() const
{
  return true;
}


/**
 * Overloads 'operator<<' for displaying objects of class 'HyperRectDomain'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'HyperRectDomain' to write.
 * @return the output stream after the writing.
 */
template<typename TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const HyperRectDomain<TSpace> & object )
{
  object.selfDisplay ( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


