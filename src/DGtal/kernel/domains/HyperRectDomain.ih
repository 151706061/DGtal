/**
 * @file HyperRectDomain.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/25
 *
 * Implementation of inline methods defined in HyperRectDomain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
 * Constructor.
 *
 * (Lowest = Highest = {0}^n)
 */
template<class TSpace>
DGtal::HyperRectDomain<TSpace>::HyperRectDomain()
{
  typedef typename DGtal::HyperRectDomain<TSpace>::PointType PT;
  PT aPoint;

  aPoint.zero();
  myLowerBound = aPoint;
  myUpperBound = aPoint;
}

/**
 * Constructor from  two points (the Space diagonal)
 *
 *
 */
template<class TSpace>
DGtal::HyperRectDomain<TSpace>::HyperRectDomain ( const typename DGtal::HyperRectDomain<TSpace>::PointType &aPointA,
						  const typename DGtal::HyperRectDomain<TSpace>::PointType &aPointB )
{
  if ( aPointA < aPointB )
    {
      myLowerBound = aPointA;
      myUpperBound = aPointB;
    }
  else
    {
      myLowerBound = aPointB;
      myUpperBound = aPointA;
    }

}

/**
 * Copy Constructor.
 *
 *
 */
template<class TSpace>
DGtal::HyperRectDomain<TSpace>::HyperRectDomain ( const typename DGtal::HyperRectDomain<TSpace> &aDomain)
{
  myLowerBound = aDomain.lowerBound();
  myUpperBound = aDomain.upperBound();
}


/**
 * Destructor.
 */
template<class TSpace>
DGtal::HyperRectDomain<TSpace>::~HyperRectDomain()
{
}

/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 * Forbidden by default.
 */
template<class TSpace>
DGtal::HyperRectDomain<TSpace> &
DGtal::HyperRectDomain<TSpace>::operator= ( const typename DGtal::HyperRectDomain<TSpace> & other )
{
  this->myUpperBound = other.upperBound();
  this->myLowerBound = other.lowerBound();
  return *this;
}




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Returns the extent of the HyperRectDomain
 *
 **/
template<class TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ValueType
DGtal::HyperRectDomain<TSpace>::extent() const
{
  DGtal::HyperRectDomain<TSpace>::ValueType val = 1;

  for (unsigned int k =  0; k < TSpace::staticDimension ; k++)
    val *= (myUpperBound.at(k) - myLowerBound.at(k) + 1);

  return val;
}



/**
 * Returns the lowest point of the space diagonal.
 *
 **/
template<class TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::PointType &
DGtal::HyperRectDomain<TSpace>::lowerBound() const
{
  return myLowerBound;
}


/**
 * Returns the highest point of the space diagonal.
 *
 **/
template<class TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::PointType &
DGtal::HyperRectDomain<TSpace>::upperBound() const
{
  return myUpperBound;
}


/**
 * begin() iterator.
 *
 **/
template<class TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstIterator
DGtal::HyperRectDomain<TSpace>::begin() const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstIterator ( myLowerBound,myLowerBound,myUpperBound );
}


/**
 * begin(aPoint) iterator.
 *
 **/
template<class TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstIterator
DGtal::HyperRectDomain<TSpace>::begin ( const typename HyperRectDomain<TSpace>::PointType &aPoint ) const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstIterator ( aPoint,myLowerBound,myUpperBound );
}


/**
 * end() iterator.
 *
 **/
template<class TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstIterator
DGtal::HyperRectDomain<TSpace>::end() const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstIterator ( myUpperBound,myLowerBound,myUpperBound );
}

//------------Span Iterators
/**
 * begin(aPoint,dim) Span iterator.
 *
 **/
template<class TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator
DGtal::HyperRectDomain<TSpace>::span_begin ( const typename HyperRectDomain<TSpace>::PointType &aPoint , const std::size_t aDimension) const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator ( aPoint, aDimension );
}
/**
 * end(dim) iterator.
 *
 **/
template<class TSpace>
inline
typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator
DGtal::HyperRectDomain<TSpace>::span_end( const std::size_t aDimension ) const
{
  return typename DGtal::HyperRectDomain<TSpace>::ConstSpanIterator ( this->myUpperBound, aDimension );
}




//------------helpers

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template<class TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[HyperRectDomain] = ["<< myLowerBound <<"]x["
      << myUpperBound <<"]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template<class TSpace>
inline
bool
DGtal::HyperRectDomain<TSpace>::isValid() const
{
  return true;
}


/**
 * Overloads 'operator<<' for displaying objects of class 'HyperRectDomain'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'HyperRectDomain' to write.
 * @return the output stream after the writing.
 */
template<class TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const HyperRectDomain<TSpace> & object )
{
  object.selfDisplay ( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


