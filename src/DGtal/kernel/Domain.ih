/**
 * @file Domain.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/21
 *
 * Implementation of inline methods defined in Domain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
* Constructor.
*/
template<class TSpace>
INLINE
DGtal::Domain<TSpace>::Domain()
{
}

/**
* Destructor.
*/
template<class TSpace>
INLINE
DGtal::Domain<TSpace>::~Domain()
{
}



/**
* Checks the validity/consistency of the object.
* @return 'true' if the object is valid, 'false' otherwise.
*/
template<class TSpace>
INLINE
bool
DGtal::Domain<TSpace>::isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Domain'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Domain' to write.
 * @return the output stream after the writing.
 */
template<class TSpace>
INLINE
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const Domain<TSpace> & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


