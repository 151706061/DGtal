/** 
 * @file Space.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/05/15
 * 
 * Implementation of inline methods defined in Space.h 
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <cassert>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

template<typename T,std::size_t N>
inline
DGtal::Space<T,N>::Space()
{
}

template<typename T,std::size_t N>
inline
DGtal::Space<T,N>::~Space()
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 * Does nothing.
 */
template<typename T,std::size_t N>
inline
DGtal::Space<T,N>::Space( const Space & other )
{
}


template<typename T,std::size_t N>
inline
typename DGtal::Space<T,N>::DimensionType
DGtal::Space<T,N>::dimension()
{
  return N;
}

/**
 * @return the digital space of specified subdimension of this space. 
 */
template <typename T,std::size_t N>
template <std::size_t Subdimension>
inline
typename DGtal::Space<T,N>::template Subspace<Subdimension>::Type
DGtal::Space<T,N>::subspace()
{
  ASSERT( Subdimension <= N );
  return Space<T,Subdimension>();
}

/**
 * @return the digital space of specified codimension of this space. 
 */
template <typename T,std::size_t N>
template <std::size_t Codimension>
inline
typename DGtal::Space<T,N>::template Subcospace<Codimension>::Type 
DGtal::Space<T,N>::subcospace()
{
  ASSERT( Codimension <= N );
  return Space<T,N-Codimension>();
}

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T,std::size_t N>
inline
void
DGtal::Space<T,N>::selfDisplay ( std::ostream & out ) const
{
  out << "[Space dim=" << dimension() << " size_elem=" << sizeof( T ) << " ]";
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Space'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Space' to write.
 * @return the output stream after the writing.
 */
template <typename T,std::size_t N>
inline
std::ostream&
DGtal::operator<<( std::ostream & out, 
		   const Space<T,N> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


