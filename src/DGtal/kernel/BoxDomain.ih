/**
 * @file BoxDomain.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/25
 *
 * Implementation of inline methods defined in BoxDomain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
* Constructor.
*
* (Lowest = Highest = {0}^n)
*/
template<class TSpace>
DGtal::BoxDomain<TSpace>::BoxDomain()
{
  DGtal::BoxDomain<TSpace>::PointType aPoint;

  aPoint.zero();
  myLowerBound = aPoint;
  myUpperBound = aPoint;
}

/**
* Constructor from  two points (the Space diagonal)
*
*
*/
template<class TSpace>
DGtal::BoxDomain<TSpace>::BoxDomain(const DGtal::BoxDomain<TSpace>::PointType &aPointA,const DGtal::BoxDomain<TSpace>::PointType &aPointB)
{
    if (aPointA < aPointB)
    {
        myLowerBound = aPointA;
        myUpperBound = aPointB;
    }
    else
    {
      myLowerBound = aPointB;
      myUpperBound = aPointA;
    }

}


/**
* Destructor.
*/
template<class TSpace>
DGtal::BoxDomain<TSpace>::~BoxDomain()
{
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //


/**
* Returns the lowest point of the space diagonal.
*
**/
template<class TSpace>
INLINE
const typename DGtal::BoxDomain<TSpace>::PointType &
DGtal::BoxDomain<TSpace>::lowerBound() const
{
    return myLowerBound;
}


/**
* Returns the highest point of the space diagonal.
*
**/
template<class TSpace>
INLINE
const typename DGtal::BoxDomain<TSpace>::PointType &
DGtal::BoxDomain<TSpace>::upperBound() const
{
    return myUpperBound;
}


/**
* begin() iterator.
*
**/
template<class TSpace>
INLINE
typename DGtal::BoxDomain<TSpace>::ConstIterator
DGtal::BoxDomain<TSpace>::begin() const
{
  return DGtal::BoxDomain<TSpace>::ConstIterator(myLowerBound);
}

/**
* end() iterator.
*
**/
template<class TSpace>
INLINE
typename DGtal::BoxDomain<TSpace>::ConstIterator
DGtal::BoxDomain<TSpace>::end() const
{
  return DGtal::BoxDomain<TSpace>::ConstIterator(myUpperBound);
}


/**
* Writes/Displays the object on an output stream.
* @param out the output stream where the object is written.
*/
template<class TSpace>
void
DGtal::BoxDomain<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[BoxDomain] = ["<< myLowerBound <<"]x["
    << myUpperBound <<"]";
}

/**
* Checks the validity/consistency of the object.
* @return 'true' if the object is valid, 'false' otherwise.
*/
template<class TSpace>
bool
DGtal::BoxDomain<TSpace>::isValid() const
{
    return true;
}


/**
 * Overloads 'operator<<' for displaying objects of class 'BoxDomain'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'BoxDomain' to write.
 * @return the output stream after the writing.
 */
template<class TSpace>
INLINE
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const BoxDomain<TSpace> & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


