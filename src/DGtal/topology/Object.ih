/**
 * @file Object.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/07/07
 *
 * Implementation of inline methods defined in Object.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSet the set of points of the object. It is copied
 * in the object.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>::Object
( const DigitalTopologyType & aTopology, 
  const DigitalSet & aPointSet )
  : myTopo( aTopology ),
    myPointSet( new DigitalSet( aPointSet ) )
{
}

/**
 * Constructor. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSet the set of points of the object. It is smartly
 * reference in the object.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>::Object
( const DigitalTopologyType & aTopology, 
  const CowPtr<DigitalSet> & aPointSet )
  : myTopo( aTopology ),
    myPointSet( aPointSet )
{
}
  
/**
 * Constructor by attachment of a dynamically allocated point set. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSetPtr a dynamically allocated pointer on a set of
 * points which is afterwards handled by this (which will take
 * care of its deletion).
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>::Object
( const DigitalTopologyType & aTopology, 
  DigitalSet* aPointSetPtr )
  : myTopo( aTopology ),
    myPointSet( pointSet )
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 *
 * The copy is smart in the sense that the digital set is
 * referenced, and will be copied only if the set is changed.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>::Object
( const Object & other )
  : myTopo( other.myTopo ),
    myPointSet( other.myPointSet )
{
}

/**
 * Constructor of an empty object by providing a domain.
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aDomain any domain related to the given topology.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>::Object
( const DigitalTopologyType & aTopology, 
  const typename DigitalSet::DomainType & domain )
  : myTopo( aTopology ),
    myPointSet( new DigitalSet( domain ) )
{
}

/**
 * Destructor.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>::~Object()
{
}

/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet> &
DGtal::Object<DigitalTopologyType,DigitalSet>::operator= 
( const Object & other )
{
  if ( this != &other )
    {
      myPointSet = other.myPointSet;
    }
  return *this;
}

/**
 * @return the number of elements in the set.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
typename DGtal::Object<DigitalTopologyType,DigitalSet>::SizeType 
DGtal::Object<DigitalTopologyType,DigitalSet>::size() const
{
  return myPointSet->size();
}


/**
 * A const reference on the point set defining the points of the
 * digital object.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
const DigitalSet & 
DGtal::Object<DigitalTopologyType,DigitalSet>::pointSet() const
{
  return *myPointSet;
}

/**
 * A reference on the point set defining the points of the
 * digital object (may duplicate the set).
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DigitalSet & 
DGtal::Object<DigitalTopologyType,DigitalSet>::pointSet()
{
  return *myPointSet;
}

/**
 * @return a const reference to the topology of this object.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
const DigitalTopologyType & 
DGtal::Object<DigitalTopologyType,DigitalSet>::topology() const
{
  return myTopo;
}

/**
 * @return a const reference to the adjacency of this object.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
const typename DigitalTopologyType::ForegroundAdjacencyType & 
DGtal::Object<DigitalTopologyType,DigitalSet>::adjacency() const
{
  return myTopo.kappa();
}


///////////////////////////////////////////////////////////////////////////////
// ----------------------- Object services --------------------------------

/**
 * Let A be this object with foreground adjacency k and N_k(p) the
 * k-neighborhood of p. Returns the set A intersected with N_k(p).
 *
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the kappa-neighborhood of [p] in this object.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,
	      typename DGtal::Object<DigitalTopologyType,DigitalSet>::SmallSet>
DGtal::Object<DigitalTopologyType,DigitalSet>::neighborhood
( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  Object<DigitalTopologyType,SmallSet> neighA( myTopo, pointSet().domain() );
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SmallSet & neighASet = neighA.pointSet(); 
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      neighASet.insertNew( *it ); // insertNew is guaranteed by construction.
  return neighA;
}

/**
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the cardinal of the kappa-neighborhood of [p] in this object.
 *
 * @see neighborhood
 *
 * NB: faster than computing the neighborhood then computing its cardinal.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
typename DGtal::Object<DigitalTopologyType,DigitalSet>::SizeType
DGtal::Object<DigitalTopologyType,DigitalSet>
::neighborhoodSize( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SizeType nb = 0;
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      ++nb;
  return nb;
}


/**
 * Let A be this object with foreground adjacency k and N*_k(p)
 * the proper k-neighborhood of p. Returns the set A intersected
 * with N*_k(p).
 *
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the kappa-neighborhood of [p] in this object, without p.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,
	      typename DGtal::Object<DigitalTopologyType,DigitalSet>::SmallSet>
DGtal::Object<DigitalTopologyType,DigitalSet>::properNeighborhood
( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeProperNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  Object<DigitalTopologyType,SmallSet> neighA( myTopo, pointSet().domain() );
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SmallSet & neighASet = neighA.pointSet(); 
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      neighASet.insertNew( *it ); // insertNew is guaranteed by construction.
  return neighA;
}

/**
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the cardinal of the kappa-neighborhood of [p] in this object.
 *
 * @see properNeighborhood
 *
 * NB: faster than computing the proper neighborhood then
 * computing its cardinal.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
typename DGtal::Object<DigitalTopologyType,DigitalSet>::SizeType
DGtal::Object<DigitalTopologyType,DigitalSet>
::properNeighborhoodSize( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeProperNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SizeType nb = 0;
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      ++nb;
  return nb;
}



/**
 * @return the border of this object (the set of points of this
 * which is lambda()-adjacent with some point of the background).
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
DGtal::Object<DigitalTopologyType,DigitalSet>
DGtal::Object<DigitalTopologyType,DigitalSet>::border() const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  const DigitalSet & mySet = pointSet();
  Object<DigitalTopologyType,DigitalSet> output( topology(), 
						 mySet.domain() );
  DigitalSet & outputSet = output.pointSet();

  // Loop on all points of the set.
  const DigitalSetConstIterator it_end = mySet.end();
  for ( DigitalSetConstIterator it = mySet.begin();
	it != it_end;
	++it )
    {
      std::back_insert_iterator< Container > back_ins_it( neigh );
      topology().lambda().writeProperNeighborhood( *it, back_ins_it );
      // Checks if any point is not in the object.
      const ContainerConstIterator itc_end( neigh.end() );
      for ( ContainerConstIterator itc = neigh.begin();
	    itc != itc_end;
	    ++itc )
	if ( pointSet().find( *itc ) == it_end )
	  {
	    outputSet.insertNew( *it );
	    break;
	  }
      neigh.clear();
    }
  return output;
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
void
DGtal::Object<DigitalTopologyType,DigitalSet>
::selfDisplay ( std::ostream & out ) const
{
  out << "[Object"
      << " topology=" << myTopo
      << " counts=" << myPointSet.count()
      << " set=" << *myPointSet
      << "]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename DigitalTopologyType, typename DigitalSet>
inline
bool
DGtal::Object<DigitalTopologyType, DigitalSet>::isValid() const
{
  return myPointSet != 0;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename DigitalTopologyType, typename DigitalSet>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const Object<DigitalTopologyType,DigitalSet> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


