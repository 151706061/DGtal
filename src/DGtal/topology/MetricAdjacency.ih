/**
 * @file MetricAdjacency.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/07/04
 *
 * Implementation of inline methods defined in MetricAdjacency.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/kernel/domains/HyperRectDomain.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename Space, std::size_t maxNorm1>
inline
DGtal::MetricAdjacency<Space,maxNorm1>::~MetricAdjacency()
{
}

/**
 * Constructor. Does nothing. Due to the symmetry and translation
 * invariance of this digital topology, all methods are static.
 */
template <typename Space, std::size_t maxNorm1>
inline
DGtal::MetricAdjacency<Space,maxNorm1>::MetricAdjacency()
{
}

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Adjacency services -----------------------------

/**
 * @param p1 any point in this space.
 * @param p2 any point in this space.
 *
 * @return 'true' iff p1 is adjacent to p2 according to this
 * adjacency relation.
 */
template <typename Space, std::size_t maxNorm1>
inline
bool 
DGtal::MetricAdjacency<Space,maxNorm1>::isAdjacentTo
( const Point & p1, const Point & p2 )
{
  Vector v( p2 - p1 );
  return ( v.normInfinity() <= 1 ) && ( v.norm1() <= maxNorm1 );
}

/**
 * @param p1 any point in this space.
 * @param p2 any point in this space.
 *
 * @return 'true' iff p1 is adjacent to p2 according to this
 * adjacency relation and p1 != p2.
 */
template <typename Space, std::size_t maxNorm1>
inline
bool 
DGtal::MetricAdjacency<Space,maxNorm1>::isProperlyAdjacentTo
( const Point & p1, const Point & p2 )
{
  Vector v( p2 - p1 );
  if ( v.normInfinity() <= 1 )
    {
      typename Vector::UnsignedComponent n1 = v.norm1();
      return ( n1 <= maxNorm1 ) && ( n1 != 0 );
    }
  return false;
}

/**
 * Outputs the whole neighborhood of point [p] as a sequence of
 * *out_it++ = ...
 *
 * @tparam OutputIterator any output iterator (like
 * std::back_insert_iterator< std::vector<int> >).
 *
 * @param p any point of this space.
 * @param out_it any output iterator.
 */
template <typename Space, std::size_t maxNorm1>
template <typename OutputIterator>
void 
DGtal::MetricAdjacency<Space,maxNorm1>::writeNeighborhood
( const Point & p, OutputIterator & out_it )
{
  Point p1( p );
  for ( typename Point::Iterator it = p1.begin(); it != p1.end(); ++it )
    --(*it);
  Point p2( p );
  for ( typename Point::Iterator it = p2.begin(); it != p2.end(); ++it )
    ++(*it);
  typedef HyperRectDomain<Space> LocalDomain;
  LocalDomain domain( p1, p2 );
  for ( typename LocalDomain::ConstIterator it = domain.begin();
	it != domain.end();
	++it )
    {
      Vector v( p - *it );
      typename Vector::UnsignedComponent n1 = v.norm1();
      if ( n1 <= maxNorm1 )
	*out_it++ = *it;
    }
}

/**
 * Outputs the whole proper neighborhood of point [p] (thus
 * without [p] itself) as a sequence of *out_it++ = ...
 *
 * @tparam OutputIterator any output iterator (like
 * std::back_insert_iterator< std::vector<int> >).
 *
 * @param p any point of this space.
 * @param out_it any output iterator.
 */
template <typename Space, std::size_t maxNorm1>
template <typename OutputIterator>
void
DGtal::MetricAdjacency<Space,maxNorm1>::writeProperNeighborhood
( const Point & p, OutputIterator & out_it )
{
  Point p1( p );
  for ( typename Point::Iterator it = p1.begin(); it != p1.end(); ++it )
    --(*it);
  Point p2( p );
  for ( typename Point::Iterator it = p2.begin(); it != p2.end(); ++it )
    ++(*it);
  typedef HyperRectDomain<Space> LocalDomain;
  LocalDomain domain( p1, p2 );
  for ( typename LocalDomain::ConstIterator it = domain.begin();
	it != domain.end();
	++it )
    {
      Vector v( p - *it );
      typename Vector::UnsignedComponent n1 = v.norm1();
      if ( ( n1 <= maxNorm1 ) && ( n1 != 0 ) )
	*out_it++ = *it;
    }
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename Space, std::size_t maxNorm1>
inline
void
DGtal::MetricAdjacency<Space,maxNorm1>::selfDisplay 
( std::ostream & out )
{
  out << "[MetricAdjacency Z" << Space::staticDimension
      << " n1<=" << maxNorm1 << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename Space, std::size_t maxNorm1>
inline
bool
DGtal::MetricAdjacency<Space,maxNorm1>::isValid()
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Space, std::size_t maxNorm1>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const MetricAdjacency<Space,maxNorm1> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


