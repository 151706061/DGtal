/**
 * @file ModuloComputer.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/07/02
 *
 * Implementation of inline methods defined in ModuloComputer.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


/**
 * Initializes the modulo computer with the value [m].
 * @param m any non-zero integer.
 */
template <typename T>
inline
DGtal::ModuloComputer<T>::ModuloComputer( const typename T::UnsignedVersion &  m )
  : k( m )
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :


    
/**
 * Increment the value [i] modulo.
 * @param i any value between 0 and [k] (excluded).
 * @see k
 */
template <typename T>
inline
void 
DGtal::ModuloComputer<T>::increment( typename T::UnsignedVersion & i ) const
{
  if ( ++i == k ) i = 0;
}


/**
 * Decrement the value [i] modulo.
 * @param i any value between 0 and [k] (excluded).
 * @see k
 */
template <typename T>
inline
void 
DGtal::ModuloComputer<T>::decrement( typename T::UnsignedVersion & i ) const
{
  if ( i == 0 ) i = k;
  --i;
}


/**
 * @param i any value between 0 and [k] (excluded).
 * @return the incremented value of [i] modulo [k].
 * @see k
 */
template <typename T>
inline
typename T::UnsignedVersion 
DGtal::ModuloComputer<T>::next( typename T::UnsignedVersion i ) const
{
  ++i;
  return ( i == k ) ? 0 : i;
}


/**
 * @param i any value between 0 and [k] (excluded).
 * @return the decremented value of [i] modulo [k].
 * @see k
 */
template <typename T>
inline
typename T::UnsignedVersion 
DGtal::ModuloComputer<T>::previous( typename T::UnsignedVersion i ) const
{
  return ( i == 0 ) ? k - 1 : i - 1;
}


/**
 * @param i any integer value.
 * @return the value of [i] modulo [k].
 * @see k
 */
template <typename T>
inline
typename T::UnsignedVersion 
DGtal::ModuloComputer<T>::cast( typename T::SignedVersion i ) const
{
  while ( i < 0 ) i += k;
  typename T::UnsignedVersion ip = (typename T::SignedVersion) i;
  while ( ip >= k ) ip -= k;
  return ip;
}

    
/**
 * Less comparator modulo. Be careful, modulo comparisons have no
 * sense when the absolute difference of the values are around k / 2.
 *
 * @param i any value between 0 and [k] (excluded).  @param j any
 * value between 0 and [k] (excluded).  @return 'true' if [i] strictly
 * precedes [j] in a window 'floor([k]/2)'.  @see k
 */
template <typename T>
inline
bool 
DGtal::ModuloComputer<T>::less( typename T::UnsignedVersion i, typename T::UnsignedVersion j ) const
{
  typename T::SignedVersion d = ( (T) j ) - ( (T) i );
  if ( d > 0 )
    return d < (T) ( k / 2 );
  else
    return (-d) >= (T) ( k / 2 );
}


/**
 * Performs j - i modulo, assuming less(i,j) is true.
 *
 * @param j any value between 0 and [k] (excluded).
 * @param i any value between 0 and [k] (excluded).
 * @return the value j - i, always positive. 
 * @see k
 */
template <typename T>
inline
typename T::UnsignedVersion
DGtal::ModuloComputer<T>::posDiff( typename T::UnsignedVersion j, typename T::UnsignedVersion i ) const
{
  return ( i <= j ) ? j - i : j + k - i;
}



/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::ModuloComputer<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[ModuloComputer]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::ModuloComputer<T>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const ModuloComputer<T> & object )
 {
   object.selfDisplay( out );
   return out;
 }

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


